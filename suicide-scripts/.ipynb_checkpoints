{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from fastai.text import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = Path('/home/paperspace/suicides')\n",
    "#! head -100 /home/paperspace/suicides/data/raw_disch_full.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(path/'data/raw_disch_full.csv', \"r\") as f:\n",
    "    lines = f.read()\n",
    "lines = lines.split('ryan\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rows = []\n",
    "weirds = []\n",
    "for line in lines:\n",
    "    row = line.split('||')\n",
    "    if len(row) == 4:\n",
    "        rows.append(row)\n",
    "    else:\n",
    "        weirds.append(line)\n",
    "len(weirds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SUBJECT_ID</th>\n",
       "      <th>HADM_ID</th>\n",
       "      <th>TEXT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22532</td>\n",
       "      <td>167853</td>\n",
       "      <td>Admission Date:  [**2151-7-16**]       Dischar...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13702</td>\n",
       "      <td>107527</td>\n",
       "      <td>Admission Date:  [**2118-6-2**]       Discharg...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13702</td>\n",
       "      <td>167118</td>\n",
       "      <td>Admission Date:  [**2119-5-4**]              D...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13702</td>\n",
       "      <td>196489</td>\n",
       "      <td>Admission Date:  [**2124-7-21**]              ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26880</td>\n",
       "      <td>135453</td>\n",
       "      <td>Admission Date:  [**2162-3-3**]              D...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SUBJECT_ID  HADM_ID                                               TEXT\n",
       "0       22532   167853  Admission Date:  [**2151-7-16**]       Dischar...\n",
       "1       13702   107527  Admission Date:  [**2118-6-2**]       Discharg...\n",
       "2       13702   167118  Admission Date:  [**2119-5-4**]              D...\n",
       "3       13702   196489  Admission Date:  [**2124-7-21**]              ...\n",
       "4       26880   135453  Admission Date:  [**2162-3-3**]              D..."
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text_df = pd.DataFrame(columns=rows[0], data=rows[1:])\n",
    "text_df = text_df.drop('CHARTTIME',axis=1) # they're all missing\n",
    "text_df[['SUBJECT_ID','HADM_ID']] = text_df[['SUBJECT_ID','HADM_ID']].astype(int)\n",
    "text_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 1336.2165297569154, 7980)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "word_count = np.sort(text_df.TEXT.apply(lambda x: len(x.split(' '))))\n",
    "max_word_count = np.max(word_count)\n",
    "mean_word_count = np.mean(word_count)\n",
    "min_word_count = np.min(word_count)\n",
    "plt.hist(word_count)\n",
    "min_word_count, mean_word_count, max_word_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 608 entries, 0 to 607\n",
      "Data columns (total 2 columns):\n",
      "SUBJECT_ID    608 non-null int64\n",
      "labels        608 non-null int64\n",
      "dtypes: int64(2)\n",
      "memory usage: 9.6 KB\n"
     ]
    }
   ],
   "source": [
    "labels_df = pd.read_csv(path/'data/suicide_class.csv')\n",
    "labels_df['labels'] = 1\n",
    "labels_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>labels</th>\n",
       "      <th>text</th>\n",
       "      <th>subject_id</th>\n",
       "      <th>hadm_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Admission Date:  [**2151-7-16**]       Dischar...</td>\n",
       "      <td>22532</td>\n",
       "      <td>167853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>Admission Date:  [**2118-6-2**]       Discharg...</td>\n",
       "      <td>13702</td>\n",
       "      <td>107527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>Admission Date:  [**2119-5-4**]              D...</td>\n",
       "      <td>13702</td>\n",
       "      <td>167118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>Admission Date:  [**2124-7-21**]              ...</td>\n",
       "      <td>13702</td>\n",
       "      <td>196489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Admission Date:  [**2162-3-3**]              D...</td>\n",
       "      <td>26880</td>\n",
       "      <td>135453</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   labels                                               text  subject_id  \\\n",
       "0       0  Admission Date:  [**2151-7-16**]       Dischar...       22532   \n",
       "1       0  Admission Date:  [**2118-6-2**]       Discharg...       13702   \n",
       "2       0  Admission Date:  [**2119-5-4**]              D...       13702   \n",
       "3       0  Admission Date:  [**2124-7-21**]              ...       13702   \n",
       "4       0  Admission Date:  [**2162-3-3**]              D...       26880   \n",
       "\n",
       "   hadm_id  \n",
       "0   167853  \n",
       "1   107527  \n",
       "2   167118  \n",
       "3   196489  \n",
       "4   135453  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# NB: left join drops 28 suicide labels with no notes!\n",
    "df = pd.merge(text_df,labels_df,on='SUBJECT_ID',how='left')\n",
    "df = df[['labels','TEXT','SUBJECT_ID','HADM_ID']]\n",
    "df.columns = [col.lower() for col in df.columns]\n",
    "\n",
    "df = df.fillna(0)\n",
    "df[['labels','subject_id','hadm_id']] = df[['labels','subject_id','hadm_id']].astype(int)\n",
    "df.to_csv(path/'data/std_format_raw_data.csv')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5356244761106455"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# percent of data with label=1 (suicides)\n",
    "df.labels.sum()/len(df.labels)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
